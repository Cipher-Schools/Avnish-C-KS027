struct Node{
    int data;
    Node* next;
};
Node* head;
void print(){
    if(head == NULL){
        printf("NULL");
        return ;
    }
    Node* copy = head;
    Node* FirstNode = head;
    while(copy->next != FirstNode){
        printf("%d->", copy.data);
        copy = copy.next;
    }
    printf("%d->", copy.data);
    printf("%d", head.data);
}
int getLength(){
    if(head == NULL){
        return 0;
    }
    int len = 0;
    Node* FirstNode = head;
    Node* copy = head;
    while(copy->next != FirstNode){
        len++;
        copy = copy.next;
    }
    return len + 1;
}
int insert(int data, int position){
    int len = getLength();
    if(position < 0 || position > len){
        return 0;
    }
    Node* newNode = (Node*)(malloc(sizeof(Node)));
    newNode.data = data;
    newNode.next = NULL;
    if(head == NULL || position == 0){
        newNode.next = head;
        head = newNode;
        return 1;
    }
    Node* copy = head;
    while(position - 1 > 0){
        copy = copy.next;
        position--;
    }
    newNode->next = copy->next;
    copy->next = newNode;
    return 1;
}
int delete(int position){
    int len = getLength();
    if(position < 0 || position > len){
        return 0;
    }
    if(head == NULL || position == len){
        return 0;
    }
    else if(position == 0){
        Node* toBeDeleted = head;
        head = head->next;
        free(toBeDeleted);
        return 1;
    }
    else if(len == 1 && pos == 0){
        Node* toBeDeleted = head;
        free(toBeDeleted);
        head = NULL;
        return 1;
    }
    Node* copy = head;
    while(position - 1 > 0){  // 1-1 > 0
        copy = copy.next;
        position--;
    }
    Node* toBeDeleted = copy->next;
    copy->next = copy->next->next;
    free(toBeDeleted);
    return 1;
}
Node* Search(int Target){
    if(head == NULL){
        return NULL;
    }
    Node* copy = head;
    Node* FirstNode = head;
    while(copy->next != FirstNode){
        if(copy.data == Target){
            return copy;
        }
        copy = copy.next;
    }
}
