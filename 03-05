//User function template for C++

class Solution
{
  public:
    long long int getMax(int arr[], int n)
{
    int max = INT_MIN;
    for (int i = 0; i < n; i++)
        if (arr[i] > max)
            max = arr[i];
    return max;
}
 
// return the sum of the elements in the array
long long int getSum(int arr[], int n)
{
  long long   int total = 0;
    for (int i = 0; i < n; i++)
        total += arr[i];
    return total;
}
 
// find minimum required painters for given maxlen
// which is the maximum length a painter can paint
long long int numberOfPainters(int arr[], int n, int maxLen)
{
   long long  int total = 0, numPainters = 1;
 
    for (int i = 0; i < n; i++) {
        total += arr[i];
 
        if (total > maxLen) {
 
            // for next count
            total = arr[i];
            numPainters++;
        }
    }
 
    return numPainters;
}
 
int partition(int arr[], int n, int k)
{
  long long   int lo = getMax(arr, n);
  long long   int hi = getSum(arr, n);
 
    while (lo < hi) {
      long long   int mid = lo + (hi - lo) / 2;
      long long   int requiredPainters = numberOfPainters(arr, n, mid);
 
        // find better optimum in lower half
        // here mid is included because we
        // may not get anything better
        if (requiredPainters <= k)
            hi = mid;
 
        // find better optimum in upper half
        // here mid is excluded because it gives
        // required Painters > k, which is invalid
        else
            lo = mid + 1;
    }
 
    // required
    return lo;
}
    long long minTime(int arr[], int n, int k)
    {
        return partition(arr,n,k);
        // code here
        // return minimum time
    }
};
