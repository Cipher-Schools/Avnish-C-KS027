int missingNumber(int* nums, int numsSize) {
    int xorr = 0;
    for(int i = 0; i <= numsSize; i++){
        xorr ^= i; // counting
    }
    for(int i = 0; i < numsSize; i++){
        xorr ^= nums[i]; // array
    }
    return xorr;
}



#include <stdio.h>

void KAlgo(int n){
    int ans = 0;
    while(n > 0){
        ans ++;
        int rsb = n & (-n);
        n -= rsb;
    }
    printf("Ans from KAlgo = %d", ans);
}

void NormalAlgo(int n){
    int ans = 0;
    for(int i = 0; i <= 31; i++){
        int mask = (1 << i);
        if(n & mask){ // result is non zero atleast one bit is on....
            ans++;
        }
    }
    printf("Ans from Normal Algo = %d", ans);
}

int main(){
    int n = 255;
    KAlgo(n);
    NormalAlgo(n);
    return 0;
}


#include <bits/stdc++.h>
using namespace std;

vector<string> solve(int n){
    if(n <= 0){
        return {};
    }
    if(n == 1){
        return {"0", "1"};
    }
    vector<string> ans = solve(n - 1);
    vector<string> res;
    for(int i = 0; i < ans.size(); i++){
        res.push_back("0" + ans[i]);
    }
    for(int i = ans.size() - 1; i >= 0; i--){
        res.push_back("1" + ans[i]);
    }
    return res;
}

int main(){
    int n; cin >> n;
    vector<string> ans = solve(n);
    for(int i = 0; i < ans.size(); i++){
        cout << ans[i] << " ";
    }
    return 0;
}
